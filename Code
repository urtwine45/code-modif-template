if ($triggerpro.tag -ne $null) {
    $Recuptag = $triggerpro.tag | Sort-Object -unique # Récupère les tags du template
    $Tableauvlr = New-Object PSObject # Permet l'accès au métadonnées de notre tableau
    for ($numb = 0; $numb -lt $Recuptag.count; $numb++) {
        # initialise un compteur
        $tblcolumn = if ($recuptag.count -eq 1) { $Triggerpro | where tag -Contains $recuptag } 
        else { $triggerpro | where tag -Contains $recuptag[$numb] }
        if ($recuptag.count -eq 1) { $Tableauvlr | Add-Member -name $Recuptag -MemberType NoteProperty -Value $tblcolumn.value } #Supprime les doublons et initialise les tags / triggers dans $tableauvlr
        else { $Tableauvlr | Add-Member -name $Recuptag[$numb] -MemberType NoteProperty -Value $tblcolumn.value }
        if ($recuptag.count -eq 1) { $tableauvlr.($recuptag) = $tableauvlr.($recuptag) | Sort-Object -unique }
        else { $tableauvlr.($recuptag[$numb]) = $tableauvlr.($recuptag[$numb]) | Sort-Object -unique } 
        $tableauvlr | Convert-OutputForCSV  | export-csv -notype -Delimiter ";" -Path $filepath2 # extrait le tableau dans un fichier temporaire pour fusion avec l'ancien tableau
    }
}


#########################################################################################################################################
$base = Get-content $filepath | select -first 1 # recupère les tags de l'ancien tableau
$base = $base -split ";" # le split pour le réutiliser de façon plus précise
$base = $base.Replace("`"", "") # Supprime les ""
$cunt = $base.count - 1 # Recupère le nombre de tag pour le compteur 
$h1 = ipcsv $filepath -Delimiter ";" # initialise completement l'ancien tableau dans h1
$HashTable = @{} # création d'un hashtable
for ($i = 0 ; $i -le $cunt ; $i++) { # initialisation d'un compteur
    foreach ($r in $h1) { # initialise le tableau h1 dans une hashtable
        $HashTable[$base[$i]] = $r.($base[$i])
    }
    $HashTable
}
##########################################################################################################################################
$base2 = Get-content $filepath2 | select -first 1 # recupère les tags de lu nouveau tableau
if ($base2.count -ne 1) {
    # Vérifie le cas ou le tag / value serai égal à 1 ce qui pose problème la méthode doit donc être différente
    $base2 = Get-content $filepath2 | select -first 1 # recupère les tags de lu nouveau tableau
    $base2 = $base2.Replace("`"", "")  # Supprime les ""
    $cunt2 = $base2.count - 1 # Recupère le nombre de tag pour le compteur 
    $h2 = ipcsv $filepath2 -Delimiter ";" # initialise completement le nouveau tableau dans h2
    $HashTable2 = @{} # création d'un hashtable
    for ($i = 0 ; $i -le $cunt2 ; $i++) { # initialisation d'un compteur
        foreach ($r in $h2) { # initialise le tableau h2 dans une hashtable
            $HashTable2[$base2] = $r.($base2) 
        }
        $HashTable2
    }
}
else {
    $base2 = Get-content $filepath2 | select -first 1 # recupère les tags de lu nouveau tableau
    $base2 = $base2 -split ";" # Split les tags pour réutilisation
    $base2 = $base2.Replace("`"", "") # Supprime les ""
    $cunt2 = $base2.count - 1 # Recupère le nombre de tag pour le compteur 
    $h2 = ipcsv $filepath2 -Delimiter ";" # initialise completement le nouveau tableau dans h2
    $HashTable2 = @{} # création d'un hashtable
    for ($i = 0 ; $i -le $cunt2 ; $i++) { # initialisation d'un compteur
        foreach ($r in $h2) { # initialise le tableau h2 dans une hashtable
            $HashTable2[$base2[$i]] = $r.($base2[$i]) 
        }
        $HashTable2
    }
}

$csvfinal = $hashtable, $hashtable2 | Merge-Hashtables # Fusionne l'ancien et le nouveau tableau
$Output += New-Object PSObject -Property $csvfinal # Convertie notre hashtable fusionné en tableau extractable
$output | Convert-OutputForCSV  | export-csv -NoTypeInformation -Delimiter ";" -Path $filepath
